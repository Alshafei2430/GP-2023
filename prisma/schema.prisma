// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String    @db.VarChar(50)
  lastName  String    @db.VarChar(50)
  email     String    @unique
  password  String    
  image     String?    
  location  String?   @db.VarChar(150)
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]     
}

enum Role {
  USER
  ADMIN
}

model Category {
  id        String          @id @default(uuid())
  name      String          @db.VarChar(50)
  image     String?         @db.VarChar(150)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  subCats   Sub_Category[]     
  services  Service[]
}

model Sub_Category {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(50)
  image     String?   @db.VarChar(150)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  category  Category  @relation(fields: [catId] , references: [id] , onDelete: Cascade)  
  catId     String  
  services  Service[]      
}

model Service {
  id                  String                @id @default(uuid())
  title               String                @db.VarChar(50)
  desc                String                @db.VarChar(500)
  location            String                @db.VarChar(150)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user                User                  @relation(fields: [userId] , references: [id] , onDelete: Cascade)
  userId              String
  subCat              Sub_Category          @relation(fields: [subCatId] , references: [id] , onDelete: Cascade)   
  subCatId            String  
  cat                 Category              @relation(fields: [catId] , references: [id] , onDelete: Cascade)   
  catId               String 
  ShopServices        ShopService[]
  ContractorServices  ContractorService[]
  LaborServices       LaborService[]
}

model ShopService {
  id        String    @id @default(uuid())
  service   Service   @relation(fields: [serviceId] , references: [id] , onDelete: Cascade)
  serviceId String
}
model ContractorService {
  id        String    @id @default(uuid())
  service   Service   @relation(fields: [serviceId] , references: [id] , onDelete: Cascade)
  serviceId String
}
model LaborService {
  id        String    @id @default(uuid())
  service   Service   @relation(fields: [serviceId] , references: [id] , onDelete: Cascade)
  serviceId String
}